tempName = paste(tempPair,collapse = "_")
tempName = paste(tempName,totalData$feature_index[irow],sep="_F")
totalData$PairIdentity[irow]=tempName
rm(
}
#pair identity
temp = data.frame()
for (irow in 1:dim(totalData)[1]){
tempPair = sort(c(totalData$Fimg[irow],totalData$Simg[irow]))
tempName = paste(tempPair,collapse = "_")
tempName = paste(tempName,totalData$feature_index[irow],sep="_F")
totalData$PairIdentity[irow]=tempName
rm(tempName)
}
category_perform = totalData %>% filter(accuracy!=-1)%>%group_by(subID,run,Day) %>% summarize(accuracy_rate = sum(accuracy)/length(subID))
TestRun = category_perform %>% filter(run==4)
ggplot(category_perform, aes(x = as.factor(run), y = accuracy_rate, color = as.factor(run)))+
geom_boxplot(fill = "white",lwd = 1)+
geom_jitter(width=0.2,alpha = 0.5)+
facet_wrap(~Day)+
plotformat
summarize = dplyr::summarize
#d prime of last run (one-back task on category match)
basic = totalData %>% filter(run==3|run==4)%>% group_by(subID,Day,run)%>% summarize(
hit = sum(keys==1&SameDiffCat=="S"),
fa= sum(keys==1&SameDiffCat=="D"),
cr = sum(keys==0&SameDiffCat=="D"),
miss = sum(keys==0&SameDiffCat=="S"),
HitRate =sum(keys==1&SameDiffCat=="S")/sum(SameDiffCat=="S"),
FARate = sum(keys==1&SameDiffCat=="D")/sum(SameDiffCat=="D"),
CRRate = sum(keys==0&SameDiffCat=="D")/sum(SameDiffCat=="D"),
MissRate = sum(keys==0&SameDiffCat=="S")/sum(SameDiffCat=="S"),
adjFARate = 1/(2*sum(SameDiffCat=="D")),
adjHitRate = 1-(1/(2*sum(SameDiffCat=="S"))))
basic$FARate[basic$FARate==0]=basic$adjFARate[basic$FARate==0]
basic$HitRate[basic$HitRate[!is.na(basic$HitRate)]==1]=basic$adjHitRate[basic$HitRate[!is.na(basic$HitRate)]==1]
row_index = basic$CRRate==1 & basic$MissRate==1
basic$FARate[row_index]=NA
basic$HitRate[row_index]=NA
basic$adjFARate[row_index]=NA
basic$adjHitRate[row_index]=NA
row_index = basic$CRRate==0 & basic$MissRate==0
basic$FARate[row_index]=NA
basic$HitRate[row_index]=NA
basic$adjFARate[row_index]=NA
basic$adjHitRate[row_index]=NA
basic = mutate(basic, d_p = qnorm(HitRate)-qnorm(FARate))
#Plotting
basic_longform = gather(basic, response_type, number_resp, HitRate,FARate,CRRate,MissRate)
head(basic_longform)
#d-p
ggplot(basic, aes(x = subID, y = d_p, color = Day))+
geom_point(size=3)+
labs(title="d prime", x = "subject", y = "d prime")+
plotformat
ggplot(basic, aes(x = run,y = d_p,group=run,color = subID))+
geom_boxplot(fill = "white",lwd = 1)+
geom_jitter(width=0.2,alpha = 0.5)+
facet_wrap(~Day)+
plotformat
summarize = dplyr::summarize
#d prime of last run (one-back task on category match)
basic = totalData %>% group_by(subID,Day,run)%>% summarize(
hit = sum(keys==1&SameDiffCat=="S"),
fa= sum(keys==1&SameDiffCat=="D"),
cr = sum(keys==0&SameDiffCat=="D"),
miss = sum(keys==0&SameDiffCat=="S"),
HitRate =sum(keys==1&SameDiffCat=="S")/sum(SameDiffCat=="S"),
FARate = sum(keys==1&SameDiffCat=="D")/sum(SameDiffCat=="D"),
CRRate = sum(keys==0&SameDiffCat=="D")/sum(SameDiffCat=="D"),
MissRate = sum(keys==0&SameDiffCat=="S")/sum(SameDiffCat=="S"),
adjFARate = 1/(2*sum(SameDiffCat=="D")),
adjHitRate = 1-(1/(2*sum(SameDiffCat=="S"))))
basic$FARate[basic$FARate==0]=basic$adjFARate[basic$FARate==0]
basic$HitRate[basic$HitRate[!is.na(basic$HitRate)]==1]=basic$adjHitRate[basic$HitRate[!is.na(basic$HitRate)]==1]
row_index = basic$CRRate==1 & basic$MissRate==1
basic$FARate[row_index]=NA
basic$HitRate[row_index]=NA
basic$adjFARate[row_index]=NA
basic$adjHitRate[row_index]=NA
row_index = basic$CRRate==0 & basic$MissRate==0
basic$FARate[row_index]=NA
basic$HitRate[row_index]=NA
basic$adjFARate[row_index]=NA
basic$adjHitRate[row_index]=NA
basic = mutate(basic, d_p = qnorm(HitRate)-qnorm(FARate))
#Plotting
basic_longform = gather(basic, response_type, number_resp, HitRate,FARate,CRRate,MissRate)
head(basic_longform)
#d-p
ggplot(basic, aes(x = subID, y = d_p, color = Day))+
geom_point(size=3)+
labs(title="d prime", x = "subject", y = "d prime")+
plotformat
ggplot(basic, aes(x = run,y = d_p,group=run,color = subID))+
geom_boxplot(fill = "white",lwd = 1)+
geom_jitter(width=0.2,alpha = 0.5)+
facet_wrap(~Day)+
plotformat
library(dplyr)
library(plyr)
library(tidyr)
library(ggplot2)
library(stringr)
library(lme4)
library(lmerTest)
library(ez)
#plotting format
plotformat = theme(plot.title = element_text(face="bold",size = 17,hjust = 0.5),axis.title = element_text(face = "bold",size =15), axis.text.x = element_text(size=12), axis.title.y=element_text(size=14))+theme_bw()
theme_facet = function(base_size = 14, base_family = "Helvetica") {
# Starts with theme_grey and then modify some parts
theme_bw(base_size = base_size, base_family = base_family) %+replace%
theme(
strip.background = element_blank(),
strip.text.x = element_text(size = 10),
strip.text.y = element_text(size = 10),
axis.text.x = element_blank(),
axis.text.y = element_text(size=12,hjust=1),
axis.ticks =  element_blank(), #element_line(colour = "black"),
axis.title.x= element_text(size=12),
axis.title.y= element_text(size=12,angle=90),
panel.background = element_blank(),
panel.border =element_blank(),
panel.grid.minor = element_blank(),
panel.spacing = unit(0.5, "lines"),
plot.background = element_blank(),
plot.margin = unit(c(0.3,  0.3, 0.3, 0.3), "lines"),
axis.line.x = element_line(color="black", size = 0.5),
axis.line.y = element_line(color="black", size = 0.5)
)
}
#color
Features = c('#deebf7','#9ecae1','#6baed6','#4292c6','#08519c','#08306b',
'#fee6ce','#fdae6b','#fd8d3c','#f16913','#a63603','#7f2704',
'#f0f0f0','#bdbdbd','#969696','#737373','#252525','#000000',
'#efedf5','#bcbddc','#9e9ac8','#807dba','#54278f','#3f007d')
time = 'categorization_D1';
pilot_version = "Cat_V323";
dataPath = '/Volumes/Macintosh HD/Users/Pam_sf_wang/Documents/Perceptual_learning_project/Calibration/Calibration_analysis/Prolific_analysis/V323category/';
data_new_fname = paste0("Prolific_",pilot_version,"_",time,".csv")
##loading data
totalDataDay01 = read.csv(paste0(dataPath,data_new_fname),header = T)
totalDataDay01 = totalDataDay01[,-1]
totalDataDay01$Day=as.factor(1)
##thresholds
d_p_thre = 15/100
trial_thre = 95/100
age_thre = 35
time = 'categorization_D2';
pilot_version = "Cat_V323";
dataPath = '/Volumes/Macintosh HD/Users/Pam_sf_wang/Documents/Perceptual_learning_project/Calibration/Calibration_analysis/Prolific_analysis/V323category/';
data_new_fname = paste0("Prolific_",pilot_version,"_",time,".csv")
##loading data
totalDataDay02 = read.csv(paste0(dataPath,data_new_fname),header = T)
totalDataDay02 = totalDataDay02[,-1]
totalDataDay02$Day = as.factor(2)
##combine data
totalData = rbind(totalDataDay01,totalDataDay02)
head(totalData)
library(dplyr)
library(plyr)
library(tidyr)
library(ggplot2)
library(stringr)
library(lme4)
library(lmerTest)
library(ez)
#plotting format
plotformat = theme(plot.title = element_text(face="bold",size = 17,hjust = 0.5),axis.title = element_text(face = "bold",size =15), axis.text.x = element_text(size=12), axis.title.y=element_text(size=14))+theme_bw()
theme_facet = function(base_size = 14, base_family = "Helvetica") {
# Starts with theme_grey and then modify some parts
theme_bw(base_size = base_size, base_family = base_family) %+replace%
theme(
strip.background = element_blank(),
strip.text.x = element_text(size = 10),
strip.text.y = element_text(size = 10),
axis.text.x = element_blank(),
axis.text.y = element_text(size=12,hjust=1),
axis.ticks =  element_blank(), #element_line(colour = "black"),
axis.title.x= element_text(size=12),
axis.title.y= element_text(size=12,angle=90),
panel.background = element_blank(),
panel.border =element_blank(),
panel.grid.minor = element_blank(),
panel.spacing = unit(0.5, "lines"),
plot.background = element_blank(),
plot.margin = unit(c(0.3,  0.3, 0.3, 0.3), "lines"),
axis.line.x = element_line(color="black", size = 0.5),
axis.line.y = element_line(color="black", size = 0.5)
)
}
#color
Features = c('#deebf7','#9ecae1','#6baed6','#4292c6','#08519c','#08306b',
'#fee6ce','#fdae6b','#fd8d3c','#f16913','#a63603','#7f2704',
'#f0f0f0','#bdbdbd','#969696','#737373','#252525','#000000',
'#efedf5','#bcbddc','#9e9ac8','#807dba','#54278f','#3f007d')
time = 'categorization_D1';
pilot_version = "Cat_V323";
dataPath = '/Volumes/Macintosh HD/Users/Pam_sf_wang/Documents/Perceptual_learning_project/Calibration/Calibration_analysis/Prolific_analysis/V323category/';
data_new_fname = paste0("Prolific_",pilot_version,"_",time,".csv")
##loading data
totalDataDay01 = read.csv(paste0(dataPath,data_new_fname),header = T)
totalDataDay01 = totalDataDay01[,-1]
totalDataDay01$Day=as.factor(1)
##thresholds
d_p_thre = 15/100
trial_thre = 95/100
age_thre = 35
time = 'categorization_D2';
pilot_version = "Cat_V323";
dataPath = '/Volumes/Macintosh HD/Users/Pam_sf_wang/Documents/Perceptual_learning_project/Calibration/Calibration_analysis/Prolific_analysis/V323category/';
data_new_fname = paste0("Prolific_",pilot_version,"_",time,".csv")
##loading data
totalDataDay02 = read.csv(paste0(dataPath,data_new_fname),header = T)
totalDataDay02 = totalDataDay02[,-1]
totalDataDay02$Day = as.factor(2)
##combine data
totalData = rbind(totalDataDay01,totalDataDay02)
head(totalData)
summarize = dplyr::summarize
#check basic performance -- remove non-responding subjects
totalData[is.na(totalData$accuracy),]
totalData = totalData[-c(which(is.na(totalData$accuracy))),]
temp = totalData %>% group_by(subID,Day) %>% summarize(num_noresponses= sum(accuracy==-1), trialNum = length(subID), no_resp = sum(accuracy==-1)/trialNum)
sprintf("total trial number: %i; Number of subjects %i",temp$trialNum[1],dim(temp)[1])
head(temp)
###quantile: sample quantiles corresponding to the given probabilities
summary(temp$no_resp)
noresp_thre = quantile(temp$no_resp,prob = trial_thre,na.rm = TRUE)
sprintf("the last 5percent of non-resp rate (threshold for excluding subjects): %f",noresp_thre)
ggplot(temp, aes(y= no_resp, x= subID))+
geom_point()+
geom_hline(yintercept=noresp_thre, linetype="dashed", color = "red", size=0.5)+
labs(title="No responses", x ="subjuect ID", y = "number of no responses")+
plotformat
#no response subjects
removeSub = temp$subID[temp$no_resp>=noresp_thre]
totalData = totalData%>%filter(!subID %in% removeSub)
totalData = mutate(totalData, subID = as.factor(subID))
sprintf("remove no response subjects: %i; remain subjects %i",length(removeSub),length(unique(totalData$subID)))
removeSub
summarize = dplyr::summarize
#trial conditions: different:D; same:S (same as keys)
totalData$SameDiffImg = NA;
totalData$SameDiffImg[totalData$Fimg==totalData$Simg]="S";
totalData$SameDiffImg[totalData$Fimg!=totalData$Simg]="D";
totalData$feature_index = as.factor(totalData$feature_index)
#trial conditions: level
totalData$SameDiffCat = "D";
totalData$SameDiffCat[totalData$Fimg<=18 & totalData$Simg<=18]="S";
totalData$SameDiffCat[totalData$Fimg>18 & totalData$Simg>18]="S";
#pair identity
temp = data.frame()
for (irow in 1:dim(totalData)[1]){
tempPair = sort(c(totalData$Fimg[irow],totalData$Simg[irow]))
tempName = paste(tempPair,collapse = "_")
tempName = paste(tempName,totalData$feature_index[irow],sep="_F")
totalData$PairIdentity[irow]=tempName
rm(tempName)
}
category_perform = totalData %>% filter(accuracy!=-1)%>%group_by(subID,run,Day) %>% summarize(accuracy_rate = sum(accuracy)/length(subID))
TestRun = category_perform %>% filter(run==4)
ggplot(category_perform, aes(x = as.factor(run), y = accuracy_rate, color = as.factor(run)))+
geom_boxplot(fill = "white",lwd = 1)+
geom_jitter(width=0.2,alpha = 0.5)+
facet_wrap(~Day)+
plotformat
ANOVAtest = aov(accuracy_rate~run,category_perform)
summary(ANOVAtest)
summarize = dplyr::summarize
#d prime of last run (one-back task on category match)
basic = totalData %>% group_by(subID,Day,run)%>% summarize(
hit = sum(keys==1&SameDiffCat=="S"),
fa= sum(keys==1&SameDiffCat=="D"),
cr = sum(keys==0&SameDiffCat=="D"),
miss = sum(keys==0&SameDiffCat=="S"),
HitRate =sum(keys==1&SameDiffCat=="S")/sum(SameDiffCat=="S"),
FARate = sum(keys==1&SameDiffCat=="D")/sum(SameDiffCat=="D"),
CRRate = sum(keys==0&SameDiffCat=="D")/sum(SameDiffCat=="D"),
MissRate = sum(keys==0&SameDiffCat=="S")/sum(SameDiffCat=="S"),
adjFARate = 1/(2*sum(SameDiffCat=="D")),
adjHitRate = 1-(1/(2*sum(SameDiffCat=="S"))))
basic$FARate[basic$FARate==0]=basic$adjFARate[basic$FARate==0]
basic$HitRate[basic$HitRate[!is.na(basic$HitRate)]==1]=basic$adjHitRate[basic$HitRate[!is.na(basic$HitRate)]==1]
row_index = basic$CRRate==1 & basic$MissRate==1
basic$FARate[row_index]=NA
basic$HitRate[row_index]=NA
basic$adjFARate[row_index]=NA
basic$adjHitRate[row_index]=NA
row_index = basic$CRRate==0 & basic$MissRate==0
basic$FARate[row_index]=NA
basic$HitRate[row_index]=NA
basic$adjFARate[row_index]=NA
basic$adjHitRate[row_index]=NA
basic = mutate(basic, d_p = qnorm(HitRate)-qnorm(FARate))
#Plotting
basic_longform = gather(basic, response_type, number_resp, HitRate,FARate,CRRate,MissRate)
head(basic_longform)
#d-p
ggplot(basic, aes(x = subID, y = d_p, color = Day))+
geom_point(size=3)+
labs(title="d prime", x = "subject", y = "d prime")+
plotformat
ggplot(basic, aes(x = run,y = d_p,group=run,color = subID))+
geom_boxplot(fill = "white",lwd = 1)+
geom_jitter(width=0.2,alpha = 0.5)+
facet_wrap(~Day)+
plotformat
View(basic)
temp = basic[,c(1,13)]
View(temp)
temp = basic[,c(1,14)]
View(temp)
temp = basic[,c(1,2,14)]
View(temp)
ggplot(basic, aes(x = subID, y = d_p, color = Day))+
geom_point(size=3)+
labs(title="d prime", x = "subject", y = "d prime")+
plotformat
ggplot(basic, aes(x = run,y = d_p,group=run,color = subID))+
geom_boxplot(fill = "white",lwd = 1)+
geom_jitter(width=0.2,alpha = 0.5)+
facet_wrap(~Day)+
plotformat
sum(temp$Day==1)/4
sum(temp$Day==2)/4
library(dplyr)
library(plyr)
library(tidyr)
library(ggplot2)
library(stringr)
library(lme4)
library(lmerTest)
library(ez)
#plotting format
plotformat = theme(plot.title = element_text(face="bold",size = 17,hjust = 0.5),axis.title = element_text(face = "bold",size =15), axis.text.x = element_text(size=12), axis.title.y=element_text(size=14))+theme_bw()
theme_facet = function(base_size = 14, base_family = "Helvetica") {
# Starts with theme_grey and then modify some parts
theme_bw(base_size = base_size, base_family = base_family) %+replace%
theme(
strip.background = element_blank(),
strip.text.x = element_text(size = 10),
strip.text.y = element_text(size = 10),
axis.text.x = element_blank(),
axis.text.y = element_text(size=12,hjust=1),
axis.ticks =  element_blank(), #element_line(colour = "black"),
axis.title.x= element_text(size=12),
axis.title.y= element_text(size=12,angle=90),
panel.background = element_blank(),
panel.border =element_blank(),
panel.grid.minor = element_blank(),
panel.spacing = unit(0.5, "lines"),
plot.background = element_blank(),
plot.margin = unit(c(0.3,  0.3, 0.3, 0.3), "lines"),
axis.line.x = element_line(color="black", size = 0.5),
axis.line.y = element_line(color="black", size = 0.5)
)
}
#color
Features = c('#deebf7','#9ecae1','#6baed6','#4292c6','#08519c','#08306b',
'#fee6ce','#fdae6b','#fd8d3c','#f16913','#a63603','#7f2704',
'#f0f0f0','#bdbdbd','#969696','#737373','#252525','#000000',
'#efedf5','#bcbddc','#9e9ac8','#807dba','#54278f','#3f007d')
totalData = read.csv(paste0(dataPath,data_new_fname),header = T)
library(dplyr)
library(plyr)
library(tidyr)
library(ggplot2)
library(stringr)
library(lme4)
library(lmerTest)
library(ez)
#plotting format
plotformat = theme(plot.title = element_text(face="bold",size = 17,hjust = 0.5),axis.title = element_text(face = "bold",size =15), axis.text.x = element_text(size=12), axis.title.y=element_text(size=14))+theme_bw()
theme_facet = function(base_size = 14, base_family = "Helvetica") {
# Starts with theme_grey and then modify some parts
theme_bw(base_size = base_size, base_family = base_family) %+replace%
theme(
strip.background = element_blank(),
strip.text.x = element_text(size = 10),
strip.text.y = element_text(size = 10),
axis.text.x = element_blank(),
axis.text.y = element_text(size=12,hjust=1),
axis.ticks =  element_blank(), #element_line(colour = "black"),
axis.title.x= element_text(size=12),
axis.title.y= element_text(size=12,angle=90),
panel.background = element_blank(),
panel.border =element_blank(),
panel.grid.minor = element_blank(),
panel.spacing = unit(0.5, "lines"),
plot.background = element_blank(),
plot.margin = unit(c(0.3,  0.3, 0.3, 0.3), "lines"),
axis.line.x = element_line(color="black", size = 0.5),
axis.line.y = element_line(color="black", size = 0.5)
)
}
#color
Features = c('#deebf7','#9ecae1','#6baed6','#4292c6','#08519c','#08306b',
'#fee6ce','#fdae6b','#fd8d3c','#f16913','#a63603','#7f2704',
'#f0f0f0','#bdbdbd','#969696','#737373','#252525','#000000',
'#efedf5','#bcbddc','#9e9ac8','#807dba','#54278f','#3f007d')
library(dplyr)
library(plyr)
library(tidyr)
library(ggplot2)
library(stringr)
library(lme4)
library(lmerTest)
library(ez)
#plotting format
plotformat = theme(plot.title = element_text(face="bold",size = 17,hjust = 0.5),axis.title = element_text(face = "bold",size =15), axis.text.x = element_text(size=12), axis.title.y=element_text(size=14))+theme_bw()
theme_facet = function(base_size = 14, base_family = "Helvetica") {
# Starts with theme_grey and then modify some parts
theme_bw(base_size = base_size, base_family = base_family) %+replace%
theme(
strip.background = element_blank(),
strip.text.x = element_text(size = 10),
strip.text.y = element_text(size = 10),
axis.text.x = element_blank(),
axis.text.y = element_text(size=12,hjust=1),
axis.ticks =  element_blank(), #element_line(colour = "black"),
axis.title.x= element_text(size=12),
axis.title.y= element_text(size=12,angle=90),
panel.background = element_blank(),
panel.border =element_blank(),
panel.grid.minor = element_blank(),
panel.spacing = unit(0.5, "lines"),
plot.background = element_blank(),
plot.margin = unit(c(0.3,  0.3, 0.3, 0.3), "lines"),
axis.line.x = element_line(color="black", size = 0.5),
axis.line.y = element_line(color="black", size = 0.5)
)
}
#color
Features = c('#deebf7','#9ecae1','#6baed6','#4292c6','#08519c','#08306b',
'#fee6ce','#fdae6b','#fd8d3c','#f16913','#a63603','#7f2704',
'#f0f0f0','#bdbdbd','#969696','#737373','#252525','#000000',
'#efedf5','#bcbddc','#9e9ac8','#807dba','#54278f','#3f007d')
time = 'categorization_D1';
pilot_version = "Cat_V323";
dataPath = '/Volumes/Macintosh HD/Users/Pam_sf_wang/Documents/Perceptual_learning_project/Calibration/Calibration_analysis/Prolific_analysis/V323category/';
data_new_fname = paste0("Prolific_",pilot_version,"_",time,".csv")
##loading data
totalDataDay01 = read.csv(paste0(dataPath,data_new_fname),header = T)
totalDataDay01 = totalDataDay01[,-1]
totalDataDay01$Day=as.factor(1)
##thresholds
d_p_thre = 15/100
trial_thre = 95/100
age_thre = 35
time = 'categorization_D2';
pilot_version = "Cat_V323";
dataPath = '/Volumes/Macintosh HD/Users/Pam_sf_wang/Documents/Perceptual_learning_project/Calibration/Calibration_analysis/Prolific_analysis/V323category/';
data_new_fname = paste0("Prolific_",pilot_version,"_",time,".csv")
##loading data
totalDataDay02 = read.csv(paste0(dataPath,data_new_fname),header = T)
totalDataDay02 = totalDataDay02[,-1]
totalDataDay02$Day = as.factor(2)
##combine data
totalData = rbind(totalDataDay01,totalDataDay02)
head(totalData)
summarize = dplyr::summarize
#check basic performance -- remove non-responding subjects
totalData[is.na(totalData$accuracy),]
totalData = totalData[-c(which(is.na(totalData$accuracy))),]
temp = totalData %>% group_by(subID,Day) %>% summarize(num_noresponses= sum(accuracy==-1), trialNum = length(subID), no_resp = sum(accuracy==-1)/trialNum)
sprintf("total trial number: %i; Number of subjects %i",temp$trialNum[1],dim(temp)[1])
head(temp)
###quantile: sample quantiles corresponding to the given probabilities
summary(temp$no_resp)
noresp_thre = quantile(temp$no_resp,prob = trial_thre,na.rm = TRUE)
sprintf("the last 5percent of non-resp rate (threshold for excluding subjects): %f",noresp_thre)
ggplot(temp, aes(y= no_resp, x= subID))+
geom_point()+
geom_hline(yintercept=noresp_thre, linetype="dashed", color = "red", size=0.5)+
labs(title="No responses", x ="subjuect ID", y = "number of no responses")+
plotformat
#no response subjects
removeSub = temp$subID[temp$no_resp>=noresp_thre]
totalData = totalData%>%filter(!subID %in% removeSub)
totalData = mutate(totalData, subID = as.factor(subID))
sprintf("remove no response subjects: %i; remain subjects %i",length(removeSub),length(unique(totalData$subID)))
removeSub
summarize = dplyr::summarize
#trial conditions: different:D; same:S (same as keys)
totalData$SameDiffImg = NA;
totalData$SameDiffImg[totalData$Fimg==totalData$Simg]="S";
totalData$SameDiffImg[totalData$Fimg!=totalData$Simg]="D";
totalData$feature_index = as.factor(totalData$feature_index)
#trial conditions: level
totalData$SameDiffCat = "D";
totalData$SameDiffCat[totalData$Fimg<=18 & totalData$Simg<=18]="S";
totalData$SameDiffCat[totalData$Fimg>18 & totalData$Simg>18]="S";
#pair identity
temp = data.frame()
for (irow in 1:dim(totalData)[1]){
tempPair = sort(c(totalData$Fimg[irow],totalData$Simg[irow]))
tempName = paste(tempPair,collapse = "_")
tempName = paste(tempName,totalData$feature_index[irow],sep="_F")
totalData$PairIdentity[irow]=tempName
rm(tempName)
}
category_perform = totalData %>% filter(accuracy!=-1)%>%group_by(subID,run,Day) %>% summarize(accuracy_rate = sum(accuracy)/length(subID))
TestRun = category_perform %>% filter(run==4)
ggplot(category_perform, aes(x = as.factor(run), y = accuracy_rate, color = as.factor(run)))+
geom_boxplot(fill = "white",lwd = 1)+
geom_jitter(width=0.2,alpha = 0.5)+
facet_wrap(~Day)+
plotformat
ANOVAtest = aov(accuracy_rate~run,category_perform)
summary(ANOVAtest)
1+1
